[
{
	"uri": "/examples/bike-from-mike/",
	"title": "Bike From Mike",
	"tags": [],
	"description": "Distributed bike rentals",
	"content": " \u0026ldquo;BikeFromMike\u0026rdquo; is Mike\u0026rsquo;s bike rental company. He offers retailers, restaurants and other businesses a side line in bike rentals because that makes for more potential customers visiting the premises and additional revenue.\nMike provides each business with some rental bikes. Renters can see where they can pick up a bike on a nice map which shows locations and availability (while prominently featuring the products and services of participating businesses). Renters pay using the app, pick up their steed and drop it off at any other participating location. As an encouragement to visit other BikeFromMike locations and mayBike From Mikebe have a nice meal or do some shopping the \u0026ldquo;clock stops\u0026rdquo; while they are on the premises, adding the time spent there to the rental time free of charge. Mike can see when locations are about to run out of rental stock and spends much of his time ferrying bikes from surplus locations to places in need.\nBusiness Signed Up // businessId, locationId, description Bike Added To Inventory // bikeId, description Bike Delivered // bikeId, businessId, locationId Bike Location \u0026amp; Inventory Report* Bike Availability Map By Location* Renter Registered // renterId Payment Received Bike Rented // rentalId, renterId, locationId, bikeId Bike Rental Returned // rentalId  "
},
{
	"uri": "/instructor-notes/",
	"title": "Instructor Notes",
	"tags": [],
	"description": "",
	"content": " Preparation Checklist  Two days before: Email to participants: \u0026ldquo;Please install NodeJS and/or Golang.\u0026rdquo;\n Print events for the human event storming on yellow card stock.\n Print one copy per table group: Bike From Mike example for the \u0026ldquo;path less happy\u0026rdquo; exercise. Put them into envelopes labeled Envelope 1.\n Print the recipe review example events from EMD, on yellow card stock, one set per table group, in an envelope labeled Envelope 2. Use https://gogs.adaptechsolutions.ca/robert.reppel/emd-pdf for printing.\n Click the \u0026ldquo;Publish\u0026rdquo; button on https://sites.google.com/s/0BxhCfppWI-SiN3NoalZNMUxnbXc/p/0BxhCfppWI-SiQS1UVHk0MzU1bzQ/edit to make the workshop examples available.\n  "
},
{
	"uri": "/instructor-notes/1_introduction-to-eventsourcing/",
	"title": "Introduction to CQRS, Event Sourcing &amp; Microservices",
	"tags": [],
	"description": "",
	"content": " Rationale Objectives Activities Evaluation Feedback "
},
{
	"uri": "/examples/kanban-board/",
	"title": "Kanban Board",
	"tags": [],
	"description": "Lean project planning, simplified.",
	"content": " This can be used for explaining project phases.\nPhase 1: There are three columns:\n TODO Doing Done  Tasks appear in \u0026ldquo;TODO\u0026rdquo;. When somebody starts working on the task it goes to \u0026ldquo;Doing\u0026rdquo;. When it\u0026rsquo;s done \u0026hellip; it\u0026rsquo;s \u0026ldquo;Done\u0026rdquo;.\nPhase 2: The march of progress is not inexorable.\n It\u0026rsquo;s possible to move from \u0026ldquo;Doing\u0026rdquo; back to \u0026ldquo;TODO\u0026rdquo;. Things can become undone. (From \u0026ldquo;Done\u0026rdquo; to \u0026ldquo;TODO\u0026rdquo;.) It\u0026rsquo;s possible to delete tasks anytime, at any stage of completion.  Phase 3:  Custom columns! Instead of (or in addition to) TODO/Doing/Done, create your own. Prioritization! Re-arrange tasks so the most important ones are at the top.  "
},
{
	"uri": "/examples/pizza-delivery/",
	"title": "Pizza Delivery",
	"tags": [],
	"description": "In 30 Minutes Or It&#39;s Free",
	"content": " A simple introductory example.  How we do it at \u0026ldquo;Yolanda\u0026rsquo;s Always Hot \u0026amp; Fresh?\n People pick their pizza from the online menu, special, custom, all-time favourites, drinks, etc. and phone us to order. We get their phone number and address. When a pizza is ready, it shows up on the \u0026ldquo;To Be Delivered\u0026rdquo; board. A driver makes the delivery and then marks the order as \u0026ldquo;Delivered\u0026rdquo;.\n If more than 30 minutes have passed since the order was placed, the order is put on the \u0026ldquo;Refund\u0026rdquo; screen.\n Event Markdown Employee Created // employeeId, email, encryptedPassword User Profile* Employee List* Company Created // employeeId, companyId, description Company Profile* Menu Item Added // companyId, menuItemId, description, price Menu* Order Created // orderId, employeeId Order Item Added // orderId, menuItemId, quantity, price Order Item Added // orderId, menuItemId, quantity, price Order Item Added // orderId, menuItemId, quantity, price Order Delivery Address Provided // orderId, address, phoneNo Order Placed // orderId, dateTime \u0026quot;To Be Delivered\u0026quot; Board* Order Delivered // orderId, employeeId, dateTime Refund Screen* // orderId, phoneNo, totalRefundAmount, dateTimePlaced, dateTimeDelivered  "
},
{
	"uri": "/examples/recipe-reviews/",
	"title": "Recipe Review Site",
	"tags": [],
	"description": "Too many cooks - remove technical jargon which doesn&#39;t belong here.",
	"content": " What\u0026rsquo;s tasty? This site is about ranking recipes - enter yours and watch the number of stars go up. Should your creation be \u0026ldquo;Culinary Star Of The Month\u0026rdquo; by gaining the most 5 star ratings you get a $500 gift certificate.\nLet\u0026rsquo;s make a site where aspiring and seasoned chefs can enter their recipies. We do need their email address to tell them if they won and they want to be able to edit and delete their creations. Site visitors are able to assign 1 to 5 stars and add comments.\nMake a workflow: Sort the events in order of occurrence.\nUnordered event storming with technical terminology mixed in: NewUserNotificationQueued // visitorId, timestamp Recipe Edited // recipeId, description, ingredients, steps RecipeTableEntryInserted // recipeId, visitorId, description, ingTaste - nothing else is worth arguing about.redients, steps LowDiskspaceDetected // serverId, mbRemaining Recipe Rated // visitorId, recipeId, noOfStars Visitor Registered // visitorId, email, encryptedPassword RequestTimeoutOccurred // timestamp, serverId Recipe Deleted // recipeId RankingTableUpdated // recipeId, totalNoOfStars VisitorTableOperationOccurred // operationId, visitorId, jsonData Recipe Entered // visitorId, recipeId, description, ingredients, steps  Participants will find this challenging because of the technical events. After two minutes, instruct them to remove the technical events and try again.\nEvent Storming with technical events removed and in the right order: Paste this into https://webeventstorming.com to show it to participants:\nVisitor Registered // visitorId, email, encryptedPassword Recipe Entered // visitorId, recipeId, description, ingredients, steps Cookbook* // recipeId, description, ingredients, steps, noOfStars Recipe Rated // visitorId, recipeId, noOfStars Monthly Recipe Rankings* // recipeId, description, totalNoOfStars Recipe Edited // recipeId, description, ingredients, steps Recipe Deleted // recipeId  "
},
{
	"uri": "/examples/restaurant-kitchen/",
	"title": "Restaurant",
	"tags": [],
	"description": "Feeding The Masses",
	"content": "This can be used to practice with bounded contexts and context maps. The Kitchen example can be context mapped to the columns of a Kanban board\n The kitchen point job is the toughest. You have to coordinate everybody, keep an eye on food quality, do the plating and ensure the dish completion times are the same within a table.\n # Kitchen Order Received Order Started Order Plated # Expediter Order Received Plates Allocated To Tables Order Delivered # Server Order Taken Order Placed Order Received For Delivery Order Delivered Order Paid  This is an example with three contexts and context maps:\n \u0026ldquo;Order Placed\u0026rdquo; for a server means \u0026ldquo;Order Received\u0026rdquo; for the Kitchen. \u0026ldquo;Order Plated\u0026rdquo; for the kitchen indicates \u0026ldquo;Order Received For Delivery\u0026rdquo; for the Server.  Without bounded contexts the language wouldn\u0026rsquo;t be quite right:\n   Kitchen Workflow      Order Taken    Order Placed (Kitchen: \u0026ldquo;Order placed means that I have received an order which needs to be plated.\u0026rdquo;)   Order Started    Order Plated (Expediter: \u0026ldquo;Order plated means that I have received an order for allocation to tables.\u0026rdquo;)   Plates Allocated To Tables (Server: \u0026ldquo;Plates allocated to tables means there is an order for delivery.\u0026rdquo;)   Order Delivered    Order Paid     "
},
{
	"uri": "/examples/shopping-cart/",
	"title": "Shopping Cart",
	"tags": [],
	"description": "Online purchasing - what are the bounded contexts?",
	"content": " The Shopping Cart example shows a full \u0026ldquo;real life\u0026rdquo; event storming from end to end, with multiple bounded contexts. It\u0026rsquo;s good enough to generate an API using the Adaptech platform. Shopping carts are boring, but everybody is enough of a \u0026ldquo;domain expert\u0026rdquo; to make it a suitable example for a workshop.\n \u0026ldquo;We purchase inventory. When it\u0026rsquo;s there we put it into the product catalog where people can see it. They can add products to a shopping cart at any time. We only ask them to register on the site when they want to check out the cart. After that they can place an order and give us payment information so we can process the payment. They we get what they ordered from the inventory and ship it.\u0026rdquo;\n Bounded Contexts  Inventory management Product catalog Shopping cart / ordering Order fulfillment User registration / authentication  Event Storming For https://webeventstorming.com:\n# Online Ordering Create Inventory Item-\u0026gt; // sku, description Inventory* Inventory Item Created // sku, description Record New Inventory-\u0026gt; // sku, quantity Inventory Item Stocked // sku, quantity Create Product-\u0026gt; // productId, sku, hasInventory, description, retailPrice Product Added To Catalog // productId Product Catalog* Add Item To Cart-\u0026gt; // cartId, productId, quantity Shopping Cart Created // cartId Shopping Cart* Shopping Cart Item Added // cartId, productId, quantity Register -\u0026gt; // userId, email, password User Registered // userId, email, encryptedPassword User Profile* User Authenticated // userId Shopping Cart Associated With User // userId, cartId Check Out -\u0026gt; // cartId Shopping Cart Checked Out // cartId Order Created // orderId Order* Order Item Added // orderId, sku, productId, quanity, retailPrice My Orders* Provide Payment Info-\u0026gt; // userId, creditCardNo, nameOnCard, expiryDate Payment Info Provided // userId, linkToEncryptedCreditCardVault Payment Info* Pay-\u0026gt; // paymentId, creditCardNo, orderId Payment Processed // paymentId My Payments* Place Order-\u0026gt; // userId, orderId Order Placed // orderId # Fulfill the order by adding items from inventory to the package to be shipped: Add Item From Inventory-\u0026gt; // orderId, sku, quantity Inventory Item Added To Order // orderId, sku, quantity # When all the ordered items have been added to the package, the order is ready for shipment: Order Ready // orderId Mark Order As Shipped-\u0026gt; // orderId, dateShipped Order Shipped // orderId, dateShipped Mark Order As Delivered-\u0026gt; // orderId, deliveryDate Order Delivered // orderId, deliveryDate  "
},
{
	"uri": "/examples/timesheets/",
	"title": "Timesheets &amp; Billing",
	"tags": [],
	"description": "A chore, simplified.",
	"content": " Barney runs a consulting business. Let\u0026rsquo;s say they are lawyers or do software. The business flourishes. Clients really like the highly qualified staff and the way they come up with simple practial solutions, so the projects keep rolling in. They are usually time \u0026amp; materials: Employees or subcontractors log hours against client projects. The clients are invoiced. When working with subcontractors, Barney is billed by them and pays them.\nThis is currently done with spreadsheets.\n Every week the same thing. I have to chase everybody to get their hours in. Then the fun begins - duplicate submissions, Time logged against inactive projects, Excess hours for which we don\u0026rsquo;t have change requests,\n Business is booming and the process is getting just a little bit unmanageable \u0026hellip;\n \u0026ldquo;I have to dig around way too much to figure out whether we have invoiced a client for a timesheet entry and whether we have received payment.\u0026rdquo;\n Managing subcontractors is also challenging ..\n They email their invoices. Comparing submitted timesheets to the hours they billed for in any given period is time consuming.\n Solution Barney decides to build a timesheets \u0026amp; billing system which he can use in-house initially and then turn into an SAAS project.\n Users can register. Users can invite other users as either admins or consultants. Admins can create clients and projects Consultants (aka \u0026ldquo;contributors\u0026rdquo;) can log hours against projects. Admins can mark timesheet entries as having been invoiced to the client. When billed by a subcontractor, admins can mark timesheet entries as having been billed for by a subcontractor. After the contractor has been paid, timesheet entries are marked as paid to contractor. When clients pay their invoices, timesheet entries are marked as paid by client. Barney can get statements of account for clients and contractors which show amounts billed/invoiced and paid (or received). There are accounts receivable and accounts payable reports.  Here\u0026rsquo;s an event storming for phase 1 of the project:\n# Timesheets \u0026amp; Billing Register -\u0026gt; // contributorId, email contributor Registered // contributorId, email Add Project -\u0026gt; // projectId, name Project Added // projectId, name Project List* // projectId, name Create Timesheet-\u0026gt; // timesheetId, contributorId Timesheet Created // timesheetId, contributorId Log Timesheet Entry-\u0026gt; // timesheetId, timesheetEntryId, projectId, date, hours, isBillable, description Timesheet Entry Logged // timesheetId, timesheetEntryId, projectId, date, hours, isBillable, description Submit Timesheet -\u0026gt; // timesheetId, isSubmitted Timesheet Submitted // timesheetId, isSubmitted Timesheets* // timesheetId, timesheetEntryId, contributorId, projectId, date, hours, isBillable, description, isSubmitted Update Timesheet Entry -\u0026gt; // timesheetId, timesheetEntryId, projectId, date, hours, isBillable, description Timesheet Entry Updated // timesheetId, timesheetEntryId, projectId, date, hours, isBillable, description Delete Timesheet Entry -\u0026gt; // timesheetId, timesheetEntryId Timesheet Entry Deleted // timesheetId, timesheetEntryId Delete Timesheet -\u0026gt; // timesheetId Timesheet Deleted // timesheetId Remove Project -\u0026gt; // projectId Project Removed // projectId  "
},
{
	"uri": "/activities/",
	"title": "Activities",
	"tags": [],
	"description": "Participant activities designed to support learning objectives.",
	"content": ""
},
{
	"uri": "/activities/context-mapping-todo/",
	"title": "Context Mapping TODO",
	"tags": [],
	"description": "Understand how to map events between two bounded contexts.",
	"content": " Prep:  Slides with Kanban board requirements. Webeventstorming.com for same. Slides with Restaurant requirements. Webeventstorming.com for it.  Howto: Understand context mapping: (4).\n Show the Restaurant Kitchen Show the Kanban board. Discuss for 2 minutes: How would the events for the kitchen be mapped to the events on the Kanban board? Ask a table group to present what they found. Show other examples which could be mapped to a TODO list in this way, then give table groups two minutes to come up with their own examples.  Bug Found Bug Assigned Bug Fixed  Cab Ride Requested Cab Ride Started Cab Ride Paid  "
},
{
	"uri": "/instructor-notes/2_event-storming/",
	"title": "Event Storming: Understanding business requirements",
	"tags": [],
	"description": "",
	"content": " Target Audience:\n Developers Leadership Project Management User Experience Designers \u0026amp; Front End Developers  Time Allotted:\n30 Minutes\nRationale Event storming is a way of understanding existing and new systems at the business needs and objectives level. It gets everybody (technical and non-technical) on the same page, cutting down on meetings, coordination effort and crossed wires. It removes many frustrations and saves time by helping people to find a \u0026ldquo;shared language\u0026rdquo; in which to describe requirements. It is also fun.\nObjectives  Participants understand that event storming results in workflows which show what happened on a timeline from left to right. Participants know why it is important to event storm in terms of business events instead of technical events. They know what a \u0026ldquo;happy path\u0026rdquo; is. They understand that a system can have many different workflows/paths. Participants know about commands triggering events. They know how to find missing events and properties based on what read models require.  Activities  Human Event Storming (1) Bike From Mike (3, 4) \u0026ldquo;No Tech Jargon\u0026rdquo; exercise: Recipe Reviews (2)  Evaluation Feedback "
},
{
	"uri": "/activities/taking-care-of-business/",
	"title": "Recipe Reviews - No tech jargon",
	"tags": [],
	"description": "Understanding the importance of event storming business events, not technology.",
	"content": " Requires an envelope with events in random order - some are business, some are technical. One per table group. Use the EMD in recipe review example. Print it with https://gogs.adaptechsolutions.ca/robert.reppel/emd-pdf.\nHowto: \u0026ldquo;Take two minutes: Read the requirements. Then take a look at the events in the envelope. Try to arrange them in the right order.\u0026rdquo;\n Participants will run into difficulties putting the technical events in sequence and will start discussing implementation details.\n \u0026ldquo;That was painful. Try something else: Remove the technical events and try now.\u0026rdquo;\n Participants will notice that there are a lot less technical conversations and more focus on business objectives if the technical events are not present.\n "
},
{
	"uri": "/activities/human-eventstorming/",
	"title": "The Human Eventstorming",
	"tags": [],
	"description": "Get a taste of event storming and how much fun it is.",
	"content": " Print this PDF: Human Eventstorming\n Ask for volunteers from the audience.\n Have each of them grab one of the printed sheets with events.\n \u0026ldquo;Now arrange yourselves in the order in which the events occur.\u0026rdquo;\n  "
},
{
	"uri": "/activities/the-path-less-happy/",
	"title": "The Path Less Happy",
	"tags": [],
	"description": "Understanding that there are many paths through a system. Then happy path is just one of them.",
	"content": " Objective: Understand that there is more than one path through the system and that different paths can be represented as swim lanes in an event storming diagram.\nPrep:  Slide 1: Sample requirements (maybe on the wall?) and event storming. Use \u0026ldquo;Bike From Mike\u0026rdquo; example. Slide 2: Additional requirement 1 not on the happy path (delete, update, ???) Yellow postits and pens.  Howto:  \u0026ldquo;Take a look at these requirements and the event storming. That\u0026rsquo;s a \u0026lsquo;happy path\u0026rsquo;.\u0026rdquo;\n \u0026ldquo;Now \u0026hellip; spend two minutes on a second event stream which shows what happens when (deletion, etc.)\u0026rdquo;\n Instructor shows slide with happy path and two alternative flows.\n  "
},
{
	"uri": "/activities/wordcloud/",
	"title": "Word Cloud",
	"tags": [],
	"description": "Ubitous Language: Find the words which don&#39;t fit.",
	"content": " Prep: Print cards with words and phrases from three different bounded contexts, one set per table group. Put them in envelopes labeled \u0026ldquo;Word Cloud\u0026rdquo;. Tell participants to not open the envelopes until instructed to do so.\nHowto \u0026ldquo;Open the \u0026lsquo;Word Cloud\u0026rdquo; envelope. Group the cards in it - which ones belong together?\u0026rdquo;\nThen ask three table groups to tell a story about one of the bounded contexts without mentioning vocabulary of the other ones.\n"
},
{
	"uri": "/instructor-notes/3_strategic-ddd/",
	"title": "Bounded Contexts: Establishing Service Boundaries",
	"tags": [],
	"description": "Using Strategic Domain Driven Design to identify microservice boundaries and plan legacy integrations.",
	"content": " Target Audience:\n Developers Leadership Project Management User Experience Designers \u0026amp; Front End Developers  Time Allotted:\n45 min.\nRationale The trickiest part of creating effective microservices is to determine where one service ends and the next one begins. Getting this right is the secret sauce: Loose coupling and high cohesion greatly simplifies delivering and maintaining services. Bounded Contexts and the use of Ubiquitous Language to identify them are a technology agnostic and practical way of achieving this.\nObjectives  Participants understand what a ubiquitous language is and that it applies in a given context.\n They recognize when a phrase or word is used out of context.\n Participants will be able to identify bounded contexts from the results of event stormings so they can be delivered by separate teams and/or developers.\n Participants are able to describe explicit context maps.\n  Activities  Word Cloud ubiquitous language exercise (1,2)\n Context Mapping TODO (3, 4)\n  Evaluation Feedback "
},
{
	"uri": "/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/instructor-notes/4_project-managing-microservice-projects/",
	"title": "Project managing microservice projects",
	"tags": [],
	"description": "",
	"content": " Rationale Moving to CQRS and event sourced microservices drastically reduces coordination overhead and the need for regression testing.\nObjectives  The pros and cons of using events instead of user stories as units of planning and tracking are understood. Participants are able to create Kanban boards for separate bounded contexts and use them for coordinating two or more teams.  Activities  Two minute war story: Turning event stormings into TODOs by rotating them 90 degrees. Three slides: Event Storming on one, the same thing as Kanban board on the next one. Then the Kanban, with all tasks completed.\n Practice cross-team coordination using the Event Sourced Project Management exercise.\n  Evaluation Feedback "
},
{
	"uri": "/instructor-notes/5_hands-on/",
	"title": "Hands-On",
	"tags": [],
	"description": "Hands-on microservice construction. (Activities &amp; exercises, code)",
	"content": " Rationale Objectives Activities Evaluation Feedback "
},
{
	"uri": "/activities/event-sourced-project-mgmt/",
	"title": "Event Sourced Project Management",
	"tags": [],
	"description": "Cat herding simplified.",
	"content": " Prep  Do (or provide result of, on webeventstorming.com) shopping cart event storming Slide: Shopping cart example bounded contexts. Slide: Blank Kanban board - TODO-Doing-Done Slide: Explain \u0026ldquo;Upstream\u0026rdquo; and \u0026ldquo;Downstream\u0026rdquo; teams/bounded contexts.  Howto    Say Do     \u0026ldquo;Here are the results of the shopping cart exercise.\u0026rdquo; Show the shopping cart event storming on webeventstorming.com.   \u0026ldquo;What bounded contexts do you see?\u0026rdquo; After the audience has identified contexts, show a slide with the bounded contexts. (Hopefully they will be the same.) Assign one bounded context to each table group, at random.   \u0026ldquo;Create post-its for each event in the bounded context and put them into a TODO column. Put \u0026lsquo;Doing\u0026rsquo; and \u0026lsquo;Done\u0026rsquo; next to it.\u0026rdquo; Show a slide with a blank Kanban board - \u0026lsquo;TODO\u0026rsquo; \u0026lsquo;Doing\u0026rsquo; \u0026lsquo;Done\u0026rsquo;.   \u0026ldquo;Let\u0026rsquo;s do some \u0026lsquo;work\u0026rsquo;. On my mark: Move the top TODO into \u0026lsquo;Doing\u0026rsquo;. Into \u0026lsquo;Done\u0026rsquo;. Move a second one into \u0026lsquo;Doing\u0026rsquo;.\u0026rdquo;    \u0026ldquo;Find a team working on a different bounded context from you. Discuss: Who is upstream? Who is downstream? Which events can the downstream team consume now? What parts of the UI can now be delivered?\u0026rdquo; Show a slide which explains what \u0026ldquo;upstream\u0026rdquo; and \u0026ldquo;downstream\u0026rdquo; mean. Give two minutes to discuss.   \u0026ldquo;We have found that this works well in the \u0026lsquo;build\u0026rsquo; phase of projects where it cuts down a lot on meetings and status is a lot clearer. You can report it by simply saying what (= events) can happen in production at this point. The approach works less well in maintenance and bug fix phases - there we switch to using boards for ordinary conventional issue tracking. We are finding Trello very good for both types of coordination.\u0026rdquo; Summarize for a minute or two. Perhaps tell a war story.    "
},
{
	"uri": "/",
	"title": "Adaptech Workshops",
	"tags": [],
	"description": "",
	"content": " Workshop: Delivering Effective Microservices  Getting System Boundaries Right: Where does one microservice end and the next one begin, and why? How to get coupling \u0026amp; cohesion right first time using event storming, strategic Domain Driven Design, CQRS (Command Query Responsibility Segregation) and event sourcing.\n Hands-on implementation, end-to-end. We will build a working system during the workshop, from scratch. Expect a working REST API with business logic and a minimalist user interface. Participants will have access to the source code after the event.\n Leveraging legacy code investments. How to use event storming to understand legacy code and integrate it with new features and products. You will get a blueprint for doing legacy integrations in a plannable, predictable, least side effect prone way which fits your environment, project timelines and culture.\n Project planning! Moving to CQRS and event sourced microservices drastically reduces coordination overhead and the need for regression testing. We’ll share some of the tricks we learned – Adaptech builds exclusively event-sourced CQRS systems and we have been doing it for a long time.\n     09:00 – 10:30 Introduction to CQRS, Event Sourcing \u0026amp; Microservices (Greg Young) Understand     10:30 – 11:00 Understanding business requirements through Event Storming Understand   11:00 – 12:00 Using Strategic Domain Driven Design to establish microservice boundaries and plan legacy integrations. Divide   Lunch     12:30 – 13:00 Project managing microservice projects Divide   13:00 – 17:00 Hands-on microservice construction. (Activities \u0026amp; exercises, code) Conquer    "
},
{
	"uri": "/slides/effective-microservices-workshop/",
	"title": "Delivering Effective Microservices",
	"tags": [],
	"description": "",
	"content": " Delivering Effective Microservices  Introduction To Event Sourcing \u0026amp; CQRS  Manage microservice coupling \u0026amp; cohesion Integrate legacy with events Simplify code Less meetings, less planning, better results.  Event Storming The Human Eventstorming Why?  Great for exploring large complex systems. Takes only a couple of hours. Less crossed wires. Less meetings, less \u0026ldquo;documentation\u0026rdquo;. Shared understanding, understood by all. Fun! ___  How to Event Storm https://webeventstorming.com  Note: \u0026ldquo;EMD (Event Markup Language) is a simple text notation for event storming online. We also use it to generate APIs for the Adaptech Platform. Basically, any line with a -\u0026gt; is a command. Anything with a * is a document. Everything else is an event.\u0026rdquo;\nWorkshop Examples https://sites.google.com/adaptechsolutions.ca/workshop\nBike From Mike Envelope 1 Note: 1. \u0026ldquo;Take a look at these requirements and do an event storming.\u0026rdquo;\n \u0026ldquo;That\u0026rsquo;s the \u0026lsquo;happy path\u0026rsquo;. Now \u0026hellip; spend two minutes on a second event stream which shows what happens when (deletion, etc.)\u0026rdquo;  Bike From Mike Business Signed Up // businessId, locationId, description Bike Added To Inventory // bikeId, description Bike Delivered // bikeId, businessId, locationId Bike Location \u0026amp; Inventory Report* Bike Availability Map By Location* Renter Registered // renterId Payment Received Bike Rented // rentalId, renterId, locationId, bikeId Bike Rental Returned // rentalId  Recipe Reviews Envelope 2\nWhat’s tasty? This site is about ranking recipes - enter yours and watch the number of stars go up. Should your creation be “Culinary Star Of The Month” by gaining the most 5 star ratings you get a $500 gift certificate.\nLet’s make a site where aspiring and seasoned chefs can enter their recipies. We do need their email address to tell them if they won and they want to be able to edit and delete their creations. Site visitors are able to assign 1 to 5 stars and add comments.\nNote: \u0026ldquo;Take two minutes: Read the requirements. Then take a look at the events in the envelope. Try to arrange them in the right order.\u0026rdquo; Participants will run into difficulties putting the technical events in sequence and will start discussing implementation details. \u0026ldquo;That was painful. Try something else: Remove the technical events and try now.\u0026rdquo;\nNo Tech Jargon  Ubiquitous Domain Language - practice it! Events are \u0026ldquo;timeless\u0026rdquo;, surviving technology fads \u0026amp; obsolescence.   If we re-built it on a different stack - would this spec still apply?\u0026rdquo;\n Bounded Contexts: Finding Service Boundaries Strategic Domain Driven Design  \u0026ldquo;A bounded context is the context within which a ubiquitous language applies.\u0026rdquo;\n Wordcloud Envelope 3\nNote: \u0026ldquo;Please open envelope 3. Take a look at the cards in it. find the ones which belong together and put them in groups on the table.\u0026rdquo;\nRestaurant Workflow  Server Kitchen Expediter      Restaurant Kitchen Workflow     Order Taken    Order Placed (Kitchen: \u0026ldquo;Order placed means that I have received an order which needs to be plated.\u0026rdquo;)   Order Started    Order Plated (Expediter: \u0026ldquo;Order plated means that I have received an order for allocation to tables.\u0026rdquo;)   Plates Allocated To Tables (Server: \u0026ldquo;Plates allocated to tables means there is an order for delivery.\u0026rdquo;)   Order Delivered    Order Paid     Continued\u0026hellip;\n    Restaurant Kitchen Workflow     Plates Allocated To Tables (Server: \u0026ldquo;Plates allocated to tables means there is an order for delivery.\u0026rdquo;)   Order Delivered    Order Paid     Three (Ubiquitous) \u0026ldquo;Languages\u0026rdquo; Server Kitchen Expediter Kanban Board  TODO Doing Done  Note: \u0026ldquo;Using the Post-Its on the tables, event storm a simple Kanban board.\u0026rdquo; After 5 minutes, show the Kanban board example\nContext Mapping Restaurant Kanban How do these map to the Kanban board TODO/Doing/Done?\n# Kitchen Order Received Order Started Order Plated  Note: 1. Discuss for 1 minute: How would the events for the kitchen be mapped to the events on the Kanban board? 1. Ask a table group to present what they found. 1. Show other examples which could be mapped to a TODO list in this way, then give table groups two minutes to come up with their own examples.\nBug Found Bug Assigned Bug Fixed  Cab Ride Requested Cab Ride Started Cab Ride Paid  Context: Expediting Order Received Plates Allocated To Tables Order Delivered  Context: Server # Server Order Taken Order Placed Order Received For Delivery Order Delivered Order Paid  Find The Bounded Contexts sites.google.com/adaptechsolutions.ca/workshop/shopping-cart\nNote: \u0026ldquo;Copy the EMD into webeventstorming.com. Then group commands and events which belong together. Put a comment for the name of the bounded context. WRITE DOWN THE EVENTS FOR LATER. Note: Documents can belong to more than one context!\u0026rdquo; (5 minutes)\nEvent Sourced Project Management Project Planning Rotate Event Storming 90 Degrees    TODO Doing Done     Inventory Item Created     Searchable Inventory List*     Inventory Item Stocked     Inventory Item Sold      Note: \u0026ldquo;Leadership: Is this the right priority?\u0026rdquo; \u0026ldquo;UX Designers: What is the users experience when creating inventory items?\u0026rdquo; \u0026ldquo;Developers: What API \u0026amp; business rules are needed so Item Stocked events can occur? \u0026ldquo;DevOps: Given these events will happen X times per second, create suitable infrastructure.\u0026rdquo;\nStatus Reporting    TODO Doing Done       Inventory Item Created   Searchable Inventory List*      Inventory Item Stocked    Inventory Item Sold      Definition Of Done    TODO Doing Done       Inventory Item Created     Searchable Inventory List*     Inventory Item Stocked     Inventory Item Sold    Team Coordination Heroes Note: \u0026ldquo;You too can be team coordination heroes!\u0026rdquo;\nDelivering The Online Ordering Product COORDINATE THIS:  (Legacy) Inventory Management System Team (Legacy) User Registration / Identity \u0026amp; Access Team Product Catalog CMS Team Online Ordering / Shopping Experience Team Payment Processing Team Order Fulfillment System Team (\u0026hellip; where Order Placed events go \u0026hellip;)  Note: Make every table a \u0026ldquo;team\u0026rdquo;. Have them spend one minute discussing which teams they need to coordinate with. Then have \u0026ldquo;meetings\u0026rdquo; with other teams: Hand them a Post-IT with the name of the event they will receive from you.\nHands-On Koennen Vor Lachen THIS IS VERY ALPHA  Install NodeJS (\u0026hellip; or Go) Install https://eventstore.org/ Paste EMD into https://sites.google.com/adaptechsolutions.ca/workshop/esp-builder (Use one of the shopping cart bounded contexts.) Generate NodeJS or Golang code Ask us to come by and show you how to run it.  EMD conventions for the ESP Platform  First comment is the name of the bounded context: # Inventory First word in event name is the event stream/aggregate: Inventory Item Created Aggregate name + \u0026ldquo;Id\u0026rdquo; event property is the aggregate ID: Inventory Item Stocked // inventoryitemId, quantity, dateReceived  What Business Rules Does It Need? Build A Read Model Note: \u0026ldquo;As a team, decide on a business rule and a read model you\u0026rsquo;d like to implement for your bounded context.\u0026rdquo;\n"
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "Delivering Effective Microservices\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/slides/",
	"title": "Slides",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]