<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Let&#39;s Event Source - Documentation on Let&#39;s Event Source!</title>
    <link>/letseventsource/</link>
    <description>Recent content in Let&#39;s Event Source - Documentation on Let&#39;s Event Source!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Apr 2018 06:35:30 -0700</lastBuildDate>
    
	<atom:link href="/letseventsource/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is Event Storming?</title>
      <link>/letseventsource/faq/eventstorming/</link>
      <pubDate>Thu, 26 Apr 2018 06:43:00 -0700</pubDate>
      
      <guid>/letseventsource/faq/eventstorming/</guid>
      <description>Event storming is a very nice collaborative way of understanding software requirements and relating them directly to what the business needs. It was invented by Alberto Brandolini.</description>
    </item>
    
    <item>
      <title>What is Event Markdown (EMD)?</title>
      <link>/letseventsource/faq/eventmarkdown/</link>
      <pubDate>Thu, 26 Apr 2018 06:43:00 -0700</pubDate>
      
      <guid>/letseventsource/faq/eventmarkdown/</guid>
      <description>EMD is a simple convention-based textual representation of an Event Storming. It attempts to retains the key characteristics which make sticky-on-a-wall, group-of-people event storming so successful, such as deliberate fuzziness. You can try it out at https://webeventstorming.com. https://youtu.be/1Pb4a8lr74E has a 30 second intro.
EMD Cheat Sheet</description>
    </item>
    
    <item>
      <title>What is “Green” Event Markdown?</title>
      <link>/letseventsource/faq/greeneventmarkdown/</link>
      <pubDate>Thu, 26 Apr 2018 06:43:00 -0700</pubDate>
      
      <guid>/letseventsource/faq/greeneventmarkdown/</guid>
      <description>“Green” EMD is Event Markdown which contains sufficient information for automatically generating an Event Markup Language (EML) specification for an event sourced system.</description>
    </item>
    
    <item>
      <title>What is an event sourced system?</title>
      <link>/letseventsource/faq/eventsourcedsystem/</link>
      <pubDate>Thu, 26 Apr 2018 06:43:00 -0700</pubDate>
      
      <guid>/letseventsource/faq/eventsourcedsystem/</guid>
      <description>An event sourced system consists of one or more state machines, the commands which change their state, events which record the state changes, and read models which can build documents (screens, reports, lookup tables, …) with data from these events.</description>
    </item>
    
    <item>
      <title>What is Event Markup Language (EML)?</title>
      <link>/letseventsource/faq/eventmarkuplanguage/</link>
      <pubDate>Thu, 26 Apr 2018 06:43:00 -0700</pubDate>
      
      <guid>/letseventsource/faq/eventmarkuplanguage/</guid>
      <description>Event Markup Language is a YAML schema for specifying event sourced systems. It is the input for the les command line tool which is able to validate whether the specification would result in a “complete” event sourced system.</description>
    </item>
    
    <item>
      <title>What do you mean by &#34;complete&#34; event sourced system?</title>
      <link>/letseventsource/faq/complete-es-system/</link>
      <pubDate>Thu, 26 Apr 2018 06:43:00 -0700</pubDate>
      
      <guid>/letseventsource/faq/complete-es-system/</guid>
      <description>A “complete” event sourced system &amp;hellip;
 Records changes to the state of a state machine as a stream of events over time. Can re-build the current state of a state machine from recorded events. Is transactionally consistent: The current state of a state machine (a.k.a. transaction, event stream, or if DDD is your thing, aggregate) contains all the data needed to make decisions on what the next state should be when commands are processed.</description>
    </item>
    
    <item>
      <title>What are &#34;les&#34;, &#34;les-node&#34;, &#34;les-viz&#34; and &#34;compliance-test&#34;?</title>
      <link>/letseventsource/faq/cmdline-tools/</link>
      <pubDate>Thu, 26 Apr 2018 06:43:00 -0700</pubDate>
      
      <guid>/letseventsource/faq/cmdline-tools/</guid>
      <description>LESTER Command Line Tools See also: https://github.com/Adaptech/les/tree/master/cmd
les  les validates EMD/EML for completeness and converts event stormings (described in Event Markdown) to Event Markup (EML) suitable for generating CQRS/ES systems.  Think of les as an architect-in-a-box.
les-node les-node builds an event sourced NodeJS API from EML.
les-viz Generates a GraphViz digraph for an event storming which can be turned into a (e.g.) .png file:
See https://github.com/Adaptech/les/tree/master/cmd/les-viz
What is the &amp;ldquo;compliance-test&amp;rdquo; utility?</description>
    </item>
    
    <item>
      <title>What use is this? I&#39;m stuck in legacy code.</title>
      <link>/letseventsource/faq/what-about-legacy-code/</link>
      <pubDate>Thu, 26 Apr 2018 06:43:00 -0700</pubDate>
      
      <guid>/letseventsource/faq/what-about-legacy-code/</guid>
      <description>There&amp;rsquo;s a white paper for that.
The LESTER stack has been used to prototype legacy integrations which make the old system &amp;ldquo;talk&amp;rdquo; about itself. It does that by publishing business events which new &amp;ldquo;microservices&amp;rdquo; can subscribe to. If a two-way integration is needed the legacy can subscribe to business events from the new systems. This can lead to establishing the legacy as its own bounded context which integrates with other systems via pub-sub and domain events and establishes options for it&amp;rsquo;s eventual replacement.</description>
    </item>
    
    <item>
      <title>_Footer</title>
      <link>/letseventsource/_footer/</link>
      <pubDate>Thu, 26 Apr 2018 08:08:51 -0700</pubDate>
      
      <guid>/letseventsource/_footer/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>